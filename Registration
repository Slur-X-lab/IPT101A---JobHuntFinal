<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Authentication</title>
<script src="https://cdn.tailwindcss.com/3.4.16"></script>
<script>tailwind.config={theme:{extend:{colors:{primary:'#4f46e5',secondary:'#6366f1'},borderRadius:{'none':'0px','sm':'4px',DEFAULT:'8px','md':'12px','lg':'16px','xl':'20px','2xl':'24px','3xl':'32px','full':'9999px','button':'8px'}}}}</script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet">
<style>
:where([class^="ri-"])::before { content: "\f3c2"; }
body {
background-color: #f9fafb;
min-height: 100vh;
display: flex;
align-items: center;
justify-content: center;
}
input:focus {
outline: none;
border-color: #4f46e5;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
-webkit-appearance: none;
margin: 0;
}
.form-container {
display: none;
}
.form-container.active {
display: block;
}
.checkbox-bg svg {
transition: all 0.2s ease-in-out;
}
.toggle-bg {
position: relative;
transition: all 0.2s ease-in-out;
}
.toggle-bg:after {
content: '';
position: absolute;
top: 2px;
left: 2px;
width: 16px;
height: 16px;
background-color: white;
border-radius: 50%;
transition: transform 0.2s ease-in-out;
}
input:checked + .toggle-bg:after {
transform: translateX(20px);
}
@keyframes toast-in {
from {
  transform: translateY(-100%);
  opacity: 0;
}
to {
  transform: translateY(0);
  opacity: 1;
}
}
@keyframes toast-out {
from {
  transform: translateY(0);
  opacity: 1;
}
to {
  transform: translateY(-100%);
  opacity: 0;
}
}
</style>
</head>
<body>
<div class="w-full max-w-4xl mx-auto p-6 flex flex-col md:flex-row gap-8 items-center">
<!-- Left side branding -->
<div class="w-full md:w-1/2 flex flex-col items-center md:items-start">
<div class="mb-6">
<h1 class="font-['Pacifico'] text-4xl text-primary">logo</h1>
</div>
<div class="mb-8">
<h2 class="text-3xl font-bold text-gray-800 mb-4">Welcome Back</h2>
<p class="text-gray-600">Sign in to access your account or create a new one to join our community.</p>
</div>
<div class="hidden md:block">
<img src="https://readdy.ai/api/search-image?query=A%20modern%20illustration%20of%20people%20collaborating%20on%20a%20digital%20platform%2C%20with%20soft%20gradient%20colors%2C%20minimalist%20style%2C%20showing%20diverse%20characters%20interacting%20with%20floating%20UI%20elements%2C%20clean%20background%20with%20subtle%20patterns%2C%20professional%20and%20friendly%20atmosphere&width=500&height=400&seq=auth123&orientation=landscape" alt="Authentication illustration" class="rounded-xl object-cover object-top shadow-lg">
</div>
</div>
<!-- Right side forms -->
<div class="w-full md:w-1/2 bg-white rounded-xl shadow-lg p-8">
<!-- Form toggle buttons -->
<div class="flex mb-8 border rounded-full p-1 bg-gray-50">
<button id="loginToggle" class="w-1/2 py-2 px-4 rounded-full font-medium text-sm !rounded-button transition-all whitespace-nowrap bg-primary text-white">Login</button>
<button id="signupToggle" class="w-1/2 py-2 px-4 rounded-full font-medium text-sm !rounded-button transition-all whitespace-nowrap text-gray-700">Sign Up</button>
</div>
<!-- Login Form -->
<div id="loginForm" class="form-container active">
<form>
<div class="mb-4">
<label for="loginUsername" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-user-line text-gray-400"></i>
</div>
<input type="text" id="loginUsername" class="w-full py-3 pl-10 pr-3 border border-gray-300 rounded text-gray-700 text-sm" placeholder="Enter your username">
</div>
</div>
<div class="mb-6">
<label for="loginPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-lock-line text-gray-400"></i>
</div>
<input type="password" id="loginPassword" class="w-full py-3 pl-10 pr-10 border border-gray-300 rounded text-gray-700 text-sm" placeholder="Enter your password">
<button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 w-10 h-10 flex items-center justify-center toggle-password">
<i class="ri-eye-line text-gray-400"></i>
</button>
</div>
</div>
<div class="flex items-center justify-between mb-6">
<div class="flex items-center">
<div class="relative inline-block w-10 mr-2 align-middle select-none">
<input type="checkbox" id="rememberMe" class="opacity-0 absolute h-5 w-5">
<div class="toggle-bg bg-gray-200 border border-gray-200 rounded-full w-10 h-5 cursor-pointer"></div>
<label for="rememberMe" class="toggle-label block overflow-hidden h-5 rounded-full bg-gray-200 cursor-pointer"></label>
</div>
<label for="rememberMe" class="text-sm text-gray-600 cursor-pointer">Remember me</label>
</div>
<a href="#" class="text-sm text-primary hover:underline">Forgot password?</a>
</div>
<button type="submit" class="w-full bg-primary text-white py-3 rounded font-medium transition-all hover:bg-primary/90 !rounded-button whitespace-nowrap">Login</button>
<div class="my-6 flex items-center">
<div class="flex-grow h-px bg-gray-200"></div>
<span class="px-4 text-sm text-gray-500">or continue with</span>
<div class="flex-grow h-px bg-gray-200"></div>
</div>
<div class="grid grid-cols-2 gap-4 mb-6">
<button type="button" class="flex items-center justify-center gap-2 py-3 border border-gray-300 rounded font-medium text-sm text-gray-700 hover:bg-gray-50 transition-all !rounded-button whitespace-nowrap">
<div class="w-5 h-5 flex items-center justify-center">
<i class="ri-google-fill text-[#4285F4]"></i>
</div>
Google
</button>
<button type="button" class="flex items-center justify-center gap-2 py-3 border border-gray-300 rounded font-medium text-sm text-gray-700 hover:bg-gray-50 transition-all !rounded-button whitespace-nowrap">
<div class="w-5 h-5 flex items-center justify-center">
<i class="ri-facebook-fill text-[#1877F2]"></i>
</div>
Facebook
</button>
</div>
</form>
</div>
<!-- Sign Up Form -->
<div id="signupForm" class="form-container">
<form>
<div class="grid grid-cols-2 gap-4 mb-4">
<div>
<label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-user-line text-gray-400"></i>
</div>
<input type="text" id="firstName" class="w-full py-3 pl-10 pr-3 border border-gray-300 rounded text-gray-700 text-sm" placeholder="John">
</div>
</div>
<div>
<label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-user-line text-gray-400"></i>
</div>
<input type="text" id="lastName" class="w-full py-3 pl-10 pr-3 border border-gray-300 rounded text-gray-700 text-sm" placeholder="Doe">
</div>
</div>
</div>
<div class="mb-4">
<label for="signupUsername" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-at-line text-gray-400"></i>
</div>
<input type="text" id="signupUsername" class="w-full py-3 pl-10 pr-3 border border-gray-300 rounded text-gray-700 text-sm" placeholder="johndoe">
</div>
</div>
<div class="mb-4">
<label for="signupPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-lock-line text-gray-400"></i>
</div>
<input type="password" id="signupPassword" class="w-full py-3 pl-10 pr-10 border border-gray-300 rounded text-gray-700 text-sm" placeholder="Create a password">
<button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 w-10 h-10 flex items-center justify-center toggle-password">
<i class="ri-eye-line text-gray-400"></i>
</button>
</div>
<p class="mt-1 text-xs text-gray-500">Must be at least 8 characters with 1 uppercase, 1 number and 1 special character</p>
</div>
<div class="mb-6">
<label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
<div class="relative">
<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none w-10 h-10 flex items-center justify-center">
<i class="ri-lock-line text-gray-400"></i>
</div>
<input type="password" id="confirmPassword" class="w-full py-3 pl-10 pr-10 border border-gray-300 rounded text-gray-700 text-sm" placeholder="Confirm your password">
<button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 w-10 h-10 flex items-center justify-center toggle-password">
<i class="ri-eye-line text-gray-400"></i>
</button>
</div>
</div>
<div class="mb-6">
<div class="flex items-center">
<div class="relative inline-block w-5 h-5 mr-2">
<input type="checkbox" id="termsAgree" class="opacity-0 absolute">
<div class="checkbox-bg border border-gray-300 rounded w-5 h-5 cursor-pointer flex items-center justify-center">
<svg class="hidden w-3 h-3 text-primary pointer-events-none" fill="currentColor" viewBox="0 0 20 20">
<path d="M0 11l2-2 5 5L18 3l2 2L7 18z" />
</svg>
</div>
</div>
<label for="termsAgree" class="text-sm text-gray-600 cursor-pointer">I agree to the <a href="#" class="text-primary hover:underline">Terms of Service</a> and <a href="#" class="text-primary hover:underline">Privacy Policy</a></label>
</div>
</div>
<button type="submit" class="w-full bg-primary text-white py-3 rounded font-medium transition-all hover:bg-primary/90 !rounded-button whitespace-nowrap">Create Account</button>
<div class="my-6 flex items-center">
<div class="flex-grow h-px bg-gray-200"></div>
<span class="px-4 text-sm text-gray-500">or continue with</span>
<div class="flex-grow h-px bg-gray-200"></div>
</div>
<div class="grid grid-cols-2 gap-4">
<button type="button" class="flex items-center justify-center gap-2 py-3 border border-gray-300 rounded font-medium text-sm text-gray-700 hover:bg-gray-50 transition-all !rounded-button whitespace-nowrap">
<div class="w-5 h-5 flex items-center justify-center">
<i class="ri-google-fill text-[#4285F4]"></i>
</div>
Google
</button>
<button type="button" class="flex items-center justify-center gap-2 py-3 border border-gray-300 rounded font-medium text-sm text-gray-700 hover:bg-gray-50 transition-all !rounded-button whitespace-nowrap">
<div class="w-5 h-5 flex items-center justify-center">
<i class="ri-facebook-fill text-[#1877F2]"></i>
</div>
Facebook
</button>
</div>
</form>
</div>
</div>
</div>
<script>
// Simulated user database
const users = new Map();
// Toast notification function
function showToast(message, type = 'success') {
  const toast = document.createElement('div');
  toast.className = `fixed top-4 right-4 p-4 rounded shadow-lg text-white text-sm z-50 transition-all transform translate-y-0 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
  toast.textContent = message;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.classList.add('translate-y-[-100%]', 'opacity-0');
    setTimeout(() => toast.remove(), 300);
  }, 3000);
}
// Form validation functions
function validatePassword(password) {
  const minLength = 8;
  const hasUpperCase = /[A-Z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(password);
  
  return password.length >= minLength && hasUpperCase && hasNumber && hasSpecial;
}
function validateUsername(username) {
  return username.length >= 3 && /^[a-zA-Z0-9_]+$/.test(username);
}
document.addEventListener('DOMContentLoaded', function() {
  const loginToggle = document.getElementById('loginToggle');
  const signupToggle = document.getElementById('signupToggle');
  const loginForm = document.getElementById('loginForm');
  const signupForm = document.getElementById('signupForm');
  
  // Form toggle functionality
  loginToggle.addEventListener('click', function() {
    loginForm.classList.add('active');
    signupForm.classList.remove('active');
    loginToggle.classList.add('bg-primary', 'text-white');
    loginToggle.classList.remove('text-gray-700');
    signupToggle.classList.remove('bg-primary', 'text-white');
    signupToggle.classList.add('text-gray-700');
  });
  
  signupToggle.addEventListener('click', function() {
    signupForm.classList.add('active');
    loginForm.classList.remove('active');
    signupToggle.classList.add('bg-primary', 'text-white');
    signupToggle.classList.remove('text-gray-700');
    loginToggle.classList.remove('bg-primary', 'text-white');
    loginToggle.classList.add('text-gray-700');
  });
  // Password visibility toggle
  const toggleButtons = document.querySelectorAll('.toggle-password');
  toggleButtons.forEach(button => {
    button.addEventListener('click', function() {
      const input = this.parentElement.querySelector('input');
      const icon = this.querySelector('i');
      if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('ri-eye-line');
        icon.classList.add('ri-eye-off-line');
      } else {
        input.type = 'password';
        icon.classList.remove('ri-eye-off-line');
        icon.classList.add('ri-eye-line');
      }
    });
  });
  // Terms checkbox
  const termsCheckbox = document.getElementById('termsAgree');
  const checkboxBg = document.querySelector('.checkbox-bg');
  const checkmark = checkboxBg.querySelector('svg');
  termsCheckbox.addEventListener('change', function() {
    if (this.checked) {
      checkmark.classList.remove('hidden');
    } else {
      checkmark.classList.add('hidden');
    }
  });
  // Remember me toggle
  const rememberMeCheckbox = document.getElementById('rememberMe');
  const toggleBg = document.querySelector('.toggle-bg');
  rememberMeCheckbox.addEventListener('change', function() {
    if (this.checked) {
      toggleBg.classList.remove('bg-gray-200');
      toggleBg.classList.add('bg-primary');
    } else {
      toggleBg.classList.remove('bg-primary');
      toggleBg.classList.add('bg-gray-200');
    }
  });
  // Sign up form submission
  signupForm.querySelector('form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const firstName = document.getElementById('firstName').value;
    const lastName = document.getElementById('lastName').value;
    const username = document.getElementById('signupUsername').value;
    const password = document.getElementById('signupPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const termsAgreed = document.getElementById('termsAgree').checked;
    
    // Validation
    if (!firstName || !lastName || !username || !password || !confirmPassword) {
      showToast('Please fill in all fields', 'error');
      return;
    }
    
    if (!validateUsername(username)) {
      showToast('Username must be at least 3 characters and contain only letters, numbers, and underscores', 'error');
      return;
    }
    
    if (!validatePassword(password)) {
      showToast('Password must meet all requirements', 'error');
      return;
    }
    
    if (password !== confirmPassword) {
      showToast('Passwords do not match', 'error');
      return;
    }
    
    if (!termsAgreed) {
      showToast('Please agree to the Terms of Service', 'error');
      return;
    }
    
    if (users.has(username)) {
      showToast('Username already exists', 'error');
      return;
    }
    
    // Store user data
    users.set(username, {
      firstName,
      lastName,
      password,
      createdAt: new Date()
    });
    
    showToast('Account created successfully! Please log in.');
    
    // Reset form and switch to login
    this.reset();
    loginToggle.click();
  });
  // Login form submission
  loginForm.querySelector('form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;
    const rememberMe = document.getElementById('rememberMe').checked;
    
    if (!username || !password) {
      showToast('Please fill in all fields', 'error');
      return;
    }
    
    const user = users.get(username);
    
    if (!user || user.password !== password) {
      showToast('Invalid username or password', 'error');
      return;
    }
    
    // Simulate login success
    showToast(`Welcome back, ${user.firstName}!`);
    
    if (rememberMe) {
      localStorage.setItem('rememberedUser', username);
    } else {
      localStorage.removeItem('rememberedUser');
    }
    
    // Reset form
    this.reset();
  });
  // Social login handlers
  document.querySelectorAll('button').forEach(button => {
    if (button.textContent.includes('Google')) {
      button.addEventListener('click', () => {
        showToast('Google login is not implemented in this demo', 'error');
      });
    } else if (button.textContent.includes('Facebook')) {
      button.addEventListener('click', () => {
        showToast('Facebook login is not implemented in this demo', 'error');
      });
    }
  });
  // Check for remembered user
  const rememberedUser = localStorage.getItem('rememberedUser');
  if (rememberedUser) {
    document.getElementById('loginUsername').value = rememberedUser;
    document.getElementById('rememberMe').checked = true;
    document.querySelector('.toggle-bg').classList.add('bg-primary');
    document.querySelector('.toggle-bg').classList.remove('bg-gray-200');
  }
});
</script>
</body>
</html>
